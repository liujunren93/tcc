// Code generated by protoc-gen-go. DO NOT EDIT.
// source: tcc.proto

package proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type RegistryReq struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RegistryReq) Reset()         { *m = RegistryReq{} }
func (m *RegistryReq) String() string { return proto.CompactTextString(m) }
func (*RegistryReq) ProtoMessage()    {}
func (*RegistryReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_35dc7e9ebe8c6643, []int{0}
}

func (m *RegistryReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RegistryReq.Unmarshal(m, b)
}
func (m *RegistryReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RegistryReq.Marshal(b, m, deterministic)
}
func (m *RegistryReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegistryReq.Merge(m, src)
}
func (m *RegistryReq) XXX_Size() int {
	return xxx_messageInfo_RegistryReq.Size(m)
}
func (m *RegistryReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RegistryReq.DiscardUnknown(m)
}

var xxx_messageInfo_RegistryReq proto.InternalMessageInfo

type RegistryResData struct {
	TxID                 int64    `protobuf:"varint,1,opt,name=TxID,proto3" json:"TxID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RegistryResData) Reset()         { *m = RegistryResData{} }
func (m *RegistryResData) String() string { return proto.CompactTextString(m) }
func (*RegistryResData) ProtoMessage()    {}
func (*RegistryResData) Descriptor() ([]byte, []int) {
	return fileDescriptor_35dc7e9ebe8c6643, []int{1}
}

func (m *RegistryResData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RegistryResData.Unmarshal(m, b)
}
func (m *RegistryResData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RegistryResData.Marshal(b, m, deterministic)
}
func (m *RegistryResData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegistryResData.Merge(m, src)
}
func (m *RegistryResData) XXX_Size() int {
	return xxx_messageInfo_RegistryResData.Size(m)
}
func (m *RegistryResData) XXX_DiscardUnknown() {
	xxx_messageInfo_RegistryResData.DiscardUnknown(m)
}

var xxx_messageInfo_RegistryResData proto.InternalMessageInfo

func (m *RegistryResData) GetTxID() int64 {
	if m != nil {
		return m.TxID
	}
	return 0
}

type RegistryRes struct {
	Code                 int32            `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg                  string           `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data                 *RegistryResData `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *RegistryRes) Reset()         { *m = RegistryRes{} }
func (m *RegistryRes) String() string { return proto.CompactTextString(m) }
func (*RegistryRes) ProtoMessage()    {}
func (*RegistryRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_35dc7e9ebe8c6643, []int{2}
}

func (m *RegistryRes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RegistryRes.Unmarshal(m, b)
}
func (m *RegistryRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RegistryRes.Marshal(b, m, deterministic)
}
func (m *RegistryRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegistryRes.Merge(m, src)
}
func (m *RegistryRes) XXX_Size() int {
	return xxx_messageInfo_RegistryRes.Size(m)
}
func (m *RegistryRes) XXX_DiscardUnknown() {
	xxx_messageInfo_RegistryRes.DiscardUnknown(m)
}

var xxx_messageInfo_RegistryRes proto.InternalMessageInfo

func (m *RegistryRes) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *RegistryRes) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *RegistryRes) GetData() *RegistryResData {
	if m != nil {
		return m.Data
	}
	return nil
}

type AddEndpointReq struct {
	TxID                 int64    `protobuf:"varint,1,opt,name=TxID,proto3" json:"TxID,omitempty"`
	EndpointTxID         int64    `protobuf:"varint,2,opt,name=EndpointTxID,proto3" json:"EndpointTxID,omitempty"`
	ParamData            string   `protobuf:"bytes,3,opt,name=ParamData,proto3" json:"ParamData,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddEndpointReq) Reset()         { *m = AddEndpointReq{} }
func (m *AddEndpointReq) String() string { return proto.CompactTextString(m) }
func (*AddEndpointReq) ProtoMessage()    {}
func (*AddEndpointReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_35dc7e9ebe8c6643, []int{3}
}

func (m *AddEndpointReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddEndpointReq.Unmarshal(m, b)
}
func (m *AddEndpointReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddEndpointReq.Marshal(b, m, deterministic)
}
func (m *AddEndpointReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddEndpointReq.Merge(m, src)
}
func (m *AddEndpointReq) XXX_Size() int {
	return xxx_messageInfo_AddEndpointReq.Size(m)
}
func (m *AddEndpointReq) XXX_DiscardUnknown() {
	xxx_messageInfo_AddEndpointReq.DiscardUnknown(m)
}

var xxx_messageInfo_AddEndpointReq proto.InternalMessageInfo

func (m *AddEndpointReq) GetTxID() int64 {
	if m != nil {
		return m.TxID
	}
	return 0
}

func (m *AddEndpointReq) GetEndpointTxID() int64 {
	if m != nil {
		return m.EndpointTxID
	}
	return 0
}

func (m *AddEndpointReq) GetParamData() string {
	if m != nil {
		return m.ParamData
	}
	return ""
}

type TccReq struct {
	Data                 map[string]string `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *TccReq) Reset()         { *m = TccReq{} }
func (m *TccReq) String() string { return proto.CompactTextString(m) }
func (*TccReq) ProtoMessage()    {}
func (*TccReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_35dc7e9ebe8c6643, []int{4}
}

func (m *TccReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TccReq.Unmarshal(m, b)
}
func (m *TccReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TccReq.Marshal(b, m, deterministic)
}
func (m *TccReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TccReq.Merge(m, src)
}
func (m *TccReq) XXX_Size() int {
	return xxx_messageInfo_TccReq.Size(m)
}
func (m *TccReq) XXX_DiscardUnknown() {
	xxx_messageInfo_TccReq.DiscardUnknown(m)
}

var xxx_messageInfo_TccReq proto.InternalMessageInfo

func (m *TccReq) GetData() map[string]string {
	if m != nil {
		return m.Data
	}
	return nil
}

type TccRes struct {
	Code                 int32             `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg                  string            `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data                 map[string]string `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *TccRes) Reset()         { *m = TccRes{} }
func (m *TccRes) String() string { return proto.CompactTextString(m) }
func (*TccRes) ProtoMessage()    {}
func (*TccRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_35dc7e9ebe8c6643, []int{5}
}

func (m *TccRes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TccRes.Unmarshal(m, b)
}
func (m *TccRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TccRes.Marshal(b, m, deterministic)
}
func (m *TccRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TccRes.Merge(m, src)
}
func (m *TccRes) XXX_Size() int {
	return xxx_messageInfo_TccRes.Size(m)
}
func (m *TccRes) XXX_DiscardUnknown() {
	xxx_messageInfo_TccRes.DiscardUnknown(m)
}

var xxx_messageInfo_TccRes proto.InternalMessageInfo

func (m *TccRes) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *TccRes) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *TccRes) GetData() map[string]string {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*RegistryReq)(nil), "tcc.RegistryReq")
	proto.RegisterType((*RegistryResData)(nil), "tcc.RegistryResData")
	proto.RegisterType((*RegistryRes)(nil), "tcc.RegistryRes")
	proto.RegisterType((*AddEndpointReq)(nil), "tcc.AddEndpointReq")
	proto.RegisterType((*TccReq)(nil), "tcc.tccReq")
	proto.RegisterMapType((map[string]string)(nil), "tcc.tccReq.DataEntry")
	proto.RegisterType((*TccRes)(nil), "tcc.tccRes")
	proto.RegisterMapType((map[string]string)(nil), "tcc.tccRes.DataEntry")
}

func init() { proto.RegisterFile("tcc.proto", fileDescriptor_35dc7e9ebe8c6643) }

var fileDescriptor_35dc7e9ebe8c6643 = []byte{
	// 385 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x93, 0xcb, 0x6e, 0xe2, 0x30,
	0x14, 0x86, 0x65, 0x02, 0xcc, 0xe4, 0x64, 0x2e, 0xc8, 0xc3, 0x48, 0x08, 0x8d, 0x34, 0x91, 0x47,
	0x33, 0x0a, 0x9b, 0x44, 0x82, 0xc5, 0xdc, 0x56, 0x2d, 0xb0, 0xe8, 0xae, 0x72, 0x59, 0x55, 0xea,
	0xc2, 0x38, 0x86, 0xa6, 0xcd, 0x05, 0x1c, 0x07, 0x95, 0xd7, 0xe8, 0xc3, 0xf5, 0x79, 0x2a, 0x9b,
	0x5b, 0x88, 0x2a, 0xd4, 0x45, 0x37, 0xc9, 0xb9, 0x7c, 0xc9, 0xff, 0x1f, 0xe7, 0x04, 0x6c, 0xc5,
	0xb9, 0xbf, 0x90, 0x99, 0xca, 0xb0, 0xa5, 0x38, 0x27, 0x1f, 0xc1, 0xa1, 0x62, 0x1e, 0xe5, 0x4a,
	0xae, 0xa9, 0x58, 0x92, 0x9f, 0xf0, 0xf9, 0x90, 0xe6, 0x23, 0xa6, 0x18, 0xc6, 0x50, 0x9f, 0x3c,
	0x5c, 0x8c, 0x3a, 0xc8, 0x45, 0x9e, 0x45, 0x4d, 0x4c, 0x6e, 0xca, 0x4f, 0xe5, 0x1a, 0xe1, 0x59,
	0x28, 0x0c, 0xd2, 0xa0, 0x26, 0xc6, 0x2d, 0xb0, 0x92, 0x7c, 0xde, 0xa9, 0xb9, 0xc8, 0xb3, 0xa9,
	0x0e, 0xb1, 0x07, 0xf5, 0x90, 0x29, 0xd6, 0xb1, 0x5c, 0xe4, 0x39, 0xfd, 0xb6, 0xaf, 0x9d, 0x54,
	0xc4, 0xa8, 0x21, 0xc8, 0x0c, 0x3e, 0x9d, 0x85, 0xe1, 0x38, 0x0d, 0x17, 0x59, 0x94, 0x2a, 0x2a,
	0x96, 0x2f, 0x99, 0xc0, 0x04, 0x3e, 0xec, 0x10, 0xd3, 0xab, 0x99, 0xde, 0x51, 0x0d, 0x7f, 0x03,
	0xfb, 0x92, 0x49, 0x96, 0x8c, 0x76, 0xc2, 0x36, 0x3d, 0x14, 0x48, 0x0c, 0x4d, 0xc5, 0xb9, 0x7e,
	0x7f, 0x6f, 0xeb, 0x0d, 0xb9, 0x96, 0xe7, 0xf4, 0xbf, 0x1a, 0x6f, 0x9b, 0x96, 0xaf, 0xc9, 0x71,
	0xaa, 0x3d, 0x1a, 0xa4, 0xfb, 0x1b, 0xec, 0x7d, 0x49, 0x4f, 0x79, 0x2f, 0xd6, 0xc6, 0x96, 0x4d,
	0x75, 0x88, 0xdb, 0xd0, 0x58, 0xb1, 0xb8, 0x10, 0xdb, 0xc9, 0x37, 0xc9, 0xbf, 0xda, 0x1f, 0x44,
	0x1e, 0xd1, 0x56, 0xee, 0xb5, 0x07, 0xd6, 0xdb, 0x1f, 0x58, 0xc5, 0x54, 0xfe, 0x66, 0xa6, 0xfa,
	0x4f, 0x08, 0xec, 0x09, 0xe7, 0x57, 0x42, 0xae, 0x84, 0xc4, 0xdf, 0xc1, 0x9a, 0xc8, 0x35, 0x76,
	0x4a, 0xf3, 0x77, 0x4b, 0x49, 0x8e, 0x09, 0x34, 0x87, 0x2c, 0xe5, 0x22, 0x3e, 0xc1, 0xfc, 0x80,
	0x77, 0xc3, 0x2c, 0x9d, 0x45, 0x32, 0x39, 0x01, 0xf9, 0xf0, 0x7e, 0xf7, 0xed, 0x71, 0xab, 0xb2,
	0x0a, 0xcb, 0x6e, 0xb5, 0x92, 0xe3, 0x00, 0x9c, 0xd2, 0x4a, 0xe0, 0x2f, 0x06, 0x38, 0x5e, 0x92,
	0x23, 0x81, 0x73, 0xef, 0xfa, 0xd7, 0x3c, 0x52, 0xb7, 0xc5, 0xd4, 0xe7, 0x59, 0x12, 0xc4, 0x51,
	0x71, 0x57, 0xa4, 0x52, 0xa4, 0x7f, 0x07, 0x81, 0xe2, 0x3c, 0x30, 0x7f, 0xc0, 0x7f, 0x73, 0x9d,
	0x36, 0xcd, 0x6d, 0xf0, 0x1c, 0x00, 0x00, 0xff, 0xff, 0x18, 0x0e, 0xaf, 0x71, 0x1b, 0x03, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TccServerClient is the client API for TccServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TccServerClient interface {
	Try(ctx context.Context, in *TccReq, opts ...grpc.CallOption) (*TccRes, error)
	Cancel(ctx context.Context, in *TccReq, opts ...grpc.CallOption) (*TccRes, error)
	Confirm(ctx context.Context, in *TccReq, opts ...grpc.CallOption) (*TccRes, error)
	Registry(ctx context.Context, in *RegistryReq, opts ...grpc.CallOption) (*RegistryRes, error)
	AddEndpoint(ctx context.Context, in *AddEndpointReq, opts ...grpc.CallOption) (*TccRes, error)
}

type tccServerClient struct {
	cc *grpc.ClientConn
}

func NewTccServerClient(cc *grpc.ClientConn) TccServerClient {
	return &tccServerClient{cc}
}

func (c *tccServerClient) Try(ctx context.Context, in *TccReq, opts ...grpc.CallOption) (*TccRes, error) {
	out := new(TccRes)
	err := c.cc.Invoke(ctx, "/tcc.TccServer/Try", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tccServerClient) Cancel(ctx context.Context, in *TccReq, opts ...grpc.CallOption) (*TccRes, error) {
	out := new(TccRes)
	err := c.cc.Invoke(ctx, "/tcc.TccServer/Cancel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tccServerClient) Confirm(ctx context.Context, in *TccReq, opts ...grpc.CallOption) (*TccRes, error) {
	out := new(TccRes)
	err := c.cc.Invoke(ctx, "/tcc.TccServer/Confirm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tccServerClient) Registry(ctx context.Context, in *RegistryReq, opts ...grpc.CallOption) (*RegistryRes, error) {
	out := new(RegistryRes)
	err := c.cc.Invoke(ctx, "/tcc.TccServer/Registry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tccServerClient) AddEndpoint(ctx context.Context, in *AddEndpointReq, opts ...grpc.CallOption) (*TccRes, error) {
	out := new(TccRes)
	err := c.cc.Invoke(ctx, "/tcc.TccServer/AddEndpoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TccServerServer is the server API for TccServer service.
type TccServerServer interface {
	Try(context.Context, *TccReq) (*TccRes, error)
	Cancel(context.Context, *TccReq) (*TccRes, error)
	Confirm(context.Context, *TccReq) (*TccRes, error)
	Registry(context.Context, *RegistryReq) (*RegistryRes, error)
	AddEndpoint(context.Context, *AddEndpointReq) (*TccRes, error)
}

// UnimplementedTccServerServer can be embedded to have forward compatible implementations.
type UnimplementedTccServerServer struct {
}

func (*UnimplementedTccServerServer) Try(ctx context.Context, req *TccReq) (*TccRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Try not implemented")
}
func (*UnimplementedTccServerServer) Cancel(ctx context.Context, req *TccReq) (*TccRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Cancel not implemented")
}
func (*UnimplementedTccServerServer) Confirm(ctx context.Context, req *TccReq) (*TccRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Confirm not implemented")
}
func (*UnimplementedTccServerServer) Registry(ctx context.Context, req *RegistryReq) (*RegistryRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Registry not implemented")
}
func (*UnimplementedTccServerServer) AddEndpoint(ctx context.Context, req *AddEndpointReq) (*TccRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddEndpoint not implemented")
}

func RegisterTccServerServer(s *grpc.Server, srv TccServerServer) {
	s.RegisterService(&_TccServer_serviceDesc, srv)
}

func _TccServer_Try_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TccReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TccServerServer).Try(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tcc.TccServer/Try",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TccServerServer).Try(ctx, req.(*TccReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TccServer_Cancel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TccReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TccServerServer).Cancel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tcc.TccServer/Cancel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TccServerServer).Cancel(ctx, req.(*TccReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TccServer_Confirm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TccReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TccServerServer).Confirm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tcc.TccServer/Confirm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TccServerServer).Confirm(ctx, req.(*TccReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TccServer_Registry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegistryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TccServerServer).Registry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tcc.TccServer/Registry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TccServerServer).Registry(ctx, req.(*RegistryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TccServer_AddEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddEndpointReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TccServerServer).AddEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tcc.TccServer/AddEndpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TccServerServer).AddEndpoint(ctx, req.(*AddEndpointReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _TccServer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tcc.TccServer",
	HandlerType: (*TccServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Try",
			Handler:    _TccServer_Try_Handler,
		},
		{
			MethodName: "Cancel",
			Handler:    _TccServer_Cancel_Handler,
		},
		{
			MethodName: "Confirm",
			Handler:    _TccServer_Confirm_Handler,
		},
		{
			MethodName: "Registry",
			Handler:    _TccServer_Registry_Handler,
		},
		{
			MethodName: "AddEndpoint",
			Handler:    _TccServer_AddEndpoint_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tcc.proto",
}
