// Code generated by protoc-gen-go. DO NOT EDIT.
// source: server2.proto

package proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	proto1 "github.com/liujunren93/tcc/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("server2.proto", fileDescriptor_bdea151f64583110) }

var fileDescriptor_bdea151f64583110 = []byte{
	// 125 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2d, 0x4e, 0x2d, 0x2a,
	0x4b, 0x2d, 0x32, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x05, 0x53, 0x52, 0xc2, 0x25,
	0xc9, 0xc9, 0xfa, 0x60, 0xa6, 0x7e, 0x49, 0x72, 0x32, 0x44, 0xce, 0xa8, 0x89, 0x91, 0x8b, 0x0b,
	0xaa, 0x3a, 0x24, 0x39, 0x59, 0x48, 0x99, 0x8b, 0x39, 0xa4, 0xa8, 0x52, 0x88, 0x17, 0x22, 0xab,
	0x57, 0x92, 0x9c, 0x1c, 0x94, 0x5a, 0x28, 0x85, 0xc2, 0x2d, 0x16, 0x52, 0xe3, 0x62, 0x73, 0x4e,
	0xcc, 0x4b, 0x4e, 0xcd, 0x21, 0xa0, 0x4e, 0x9d, 0x8b, 0xdd, 0x39, 0x3f, 0x2f, 0x2d, 0xb3, 0x28,
	0x17, 0xbf, 0x42, 0x27, 0xce, 0x28, 0x76, 0x3d, 0x6b, 0xb0, 0x48, 0x12, 0x1b, 0x98, 0x32, 0x06,
	0x04, 0x00, 0x00, 0xff, 0xff, 0x5b, 0x12, 0x8d, 0x06, 0xc3, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Server2TccClient is the client API for Server2Tcc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type Server2TccClient interface {
	Try(ctx context.Context, in *proto1.TccReq, opts ...grpc.CallOption) (*proto1.TccRes, error)
	Cancel(ctx context.Context, in *proto1.TccReq, opts ...grpc.CallOption) (*proto1.TccRes, error)
	Confirm(ctx context.Context, in *proto1.TccReq, opts ...grpc.CallOption) (*proto1.TccRes, error)
}

type server2TccClient struct {
	cc *grpc.ClientConn
}

func NewServer2TccClient(cc *grpc.ClientConn) Server2TccClient {
	return &server2TccClient{cc}
}

func (c *server2TccClient) Try(ctx context.Context, in *proto1.TccReq, opts ...grpc.CallOption) (*proto1.TccRes, error) {
	out := new(proto1.TccRes)
	err := c.cc.Invoke(ctx, "/proto.server2Tcc/Try", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *server2TccClient) Cancel(ctx context.Context, in *proto1.TccReq, opts ...grpc.CallOption) (*proto1.TccRes, error) {
	out := new(proto1.TccRes)
	err := c.cc.Invoke(ctx, "/proto.server2Tcc/Cancel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *server2TccClient) Confirm(ctx context.Context, in *proto1.TccReq, opts ...grpc.CallOption) (*proto1.TccRes, error) {
	out := new(proto1.TccRes)
	err := c.cc.Invoke(ctx, "/proto.server2Tcc/Confirm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server2TccServer is the server API for Server2Tcc service.
type Server2TccServer interface {
	Try(context.Context, *proto1.TccReq) (*proto1.TccRes, error)
	Cancel(context.Context, *proto1.TccReq) (*proto1.TccRes, error)
	Confirm(context.Context, *proto1.TccReq) (*proto1.TccRes, error)
}

// UnimplementedServer2TccServer can be embedded to have forward compatible implementations.
type UnimplementedServer2TccServer struct {
}

func (*UnimplementedServer2TccServer) Try(ctx context.Context, req *proto1.TccReq) (*proto1.TccRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Try not implemented")
}
func (*UnimplementedServer2TccServer) Cancel(ctx context.Context, req *proto1.TccReq) (*proto1.TccRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Cancel not implemented")
}
func (*UnimplementedServer2TccServer) Confirm(ctx context.Context, req *proto1.TccReq) (*proto1.TccRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Confirm not implemented")
}

func RegisterServer2TccServer(s *grpc.Server, srv Server2TccServer) {
	s.RegisterService(&_Server2Tcc_serviceDesc, srv)
}

func _Server2Tcc_Try_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto1.TccReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Server2TccServer).Try(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.server2Tcc/Try",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Server2TccServer).Try(ctx, req.(*proto1.TccReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Server2Tcc_Cancel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto1.TccReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Server2TccServer).Cancel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.server2Tcc/Cancel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Server2TccServer).Cancel(ctx, req.(*proto1.TccReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Server2Tcc_Confirm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto1.TccReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Server2TccServer).Confirm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.server2Tcc/Confirm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Server2TccServer).Confirm(ctx, req.(*proto1.TccReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Server2Tcc_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.server2Tcc",
	HandlerType: (*Server2TccServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Try",
			Handler:    _Server2Tcc_Try_Handler,
		},
		{
			MethodName: "Cancel",
			Handler:    _Server2Tcc_Cancel_Handler,
		},
		{
			MethodName: "Confirm",
			Handler:    _Server2Tcc_Confirm_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "server2.proto",
}
